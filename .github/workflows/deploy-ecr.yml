name: Deploy to ECR and EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:  # ÊâãÂãïÂÆüË°å„ÇÇÂèØËÉΩ

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: watchme-api-vibe-scorer
  EC2_HOST: 3.24.16.82
  SERVICE_NAME: api-gpt-v1

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: private

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "‚úÖ Image pushed successfully"
        echo "  Repository: $ECR_REGISTRY/$ECR_REPOSITORY"
        echo "  Tags: $IMAGE_TAG, latest"

    - name: Deploy to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ env.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        envs: ECR_REGISTRY,ECR_REPOSITORY,AWS_REGION,SERVICE_NAME
        script: |
          echo "üöÄ Starting deployment on EC2..."
          
          # Remove existing container if exists
          docker rm -f ${SERVICE_NAME} 2>/dev/null || true
          
          # Login to ECR
          aws ecr get-login-password --region ${AWS_REGION} | \
            docker login --username AWS --password-stdin ${ECR_REGISTRY}
          
          # Pull latest image
          docker pull ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
          
          # Restart service using systemd
          sudo systemctl restart ${SERVICE_NAME}
          
          # Wait for service to be active
          sleep 5
          
          # Check service status
          if sudo systemctl is-active --quiet ${SERVICE_NAME}; then
            echo "‚úÖ Service ${SERVICE_NAME} is running"
          else
            echo "‚ùå Service ${SERVICE_NAME} failed to start"
            sudo journalctl -u ${SERVICE_NAME} -n 50
            exit 1
          fi

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        sleep 10  # Wait for service to fully start
        
        # Health check
        response=$(curl -s -o /dev/null -w "%{http_code}" https://api.hey-watch.me/vibe-scorer/health)
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Deployment successful - Health check passed"
          curl https://api.hey-watch.me/vibe-scorer/health
        else
          echo "‚ùå Health check failed with status code: $response"
          exit 1
        fi

    - name: Deployment Summary
      if: always()
      run: |
        echo "üìä Deployment Summary"
        echo "===================="
        echo "Repository: ${{ env.ECR_REPOSITORY }}"
        echo "Region: ${{ env.AWS_REGION }}"
        echo "EC2 Host: ${{ env.EC2_HOST }}"
        echo "Service: ${{ env.SERVICE_NAME }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "===================="